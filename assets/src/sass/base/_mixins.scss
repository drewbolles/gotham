//
// @file
// Custom Sass mixins
// 

/// Spit out 'rem' and 'px' font size in one go
///
/// @access public
///
/// @param {int} $size [$base-font-size] - Size of font being passed in
@mixin font-size($size: $base-font-size, $bp: null) {
  @if ($bp != null) {
    @include mq($bp) {
      font-size: $size;
      font-size: $size / $base-font-size * 1rem;
    }
  } @else {
    font-size: $size;
    font-size: $size / $base-font-size * 1rem;
  }
}

/// Applies micro clearfix to elements
///
/// @access public
///
/// @example scss
///   .block {
///     @include clearfix;
///   }
@mixin clearfix {
  &:after,
  &:before {
    display: table;
    content: ' ';
  }

  &:after {
    clear: both;
  }
}

/// Capitalize and space out text
@mixin caps {
  letter-spacing: .03em;
  text-transform: uppercase;
}

/// Apply different font families
///
/// @param {String} $key [roboto] - Key value of the `$fonts` var
/// @param {String} $type [regular] - The type of font, either regular, light, or bold
@mixin font($key: base, $type: regular) {
  @if map-has-key($fonts, $key) {
    $index: map-get($fonts, $key);
    $output: map-get($index, $type);

    font-family: $output;
    font-weight: normal;
  } @else {
    @error 'There is no font #{$key}';
  }
}

/// Cover an area w/ absolute position. Requires a parent to have position relative
/// @param {Percent} $width [100%]
/// @param {Percent} $height [100%]
@mixin cover($width: 100%, $height: 100%) {
  position: absolute;
  top: 0;
  left: 0;
  width: $width;
  height: $height;
}
